// source: nuance/dlg/v1/dlg_messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var nuance_asr_v1_recognizer_pb = require('../../../nuance/asr/v1/recognizer_pb.js');
goog.object.extend(proto, nuance_asr_v1_recognizer_pb);
var nuance_asr_v1_result_pb = require('../../../nuance/asr/v1/result_pb.js');
goog.object.extend(proto, nuance_asr_v1_result_pb);
var nuance_asr_v1_resource_pb = require('../../../nuance/asr/v1/resource_pb.js');
goog.object.extend(proto, nuance_asr_v1_resource_pb);
var nuance_tts_v1_nuance_tts_v1_pb = require('../../../nuance/tts/v1/nuance_tts_v1_pb.js');
goog.object.extend(proto, nuance_tts_v1_nuance_tts_v1_pb);
var nuance_dlg_v1_common_dlg_common_messages_pb = require('../../../nuance/dlg/v1/common/dlg_common_messages_pb.js');
goog.object.extend(proto, nuance_dlg_v1_common_dlg_common_messages_pb);
goog.exportSymbol('proto.nuance.dlg.v1.AsrParamsV1', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.AsrParamsV1.OptionalSpeechDetectionSensitivityCase', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.ExecuteRequest', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.ExecuteResponse', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StartRequest', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StartResponse', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StatusRequest', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StatusResponse', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StopRequest', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StopResponse', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StreamInput', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StreamInput.AsrControlOneofCase', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StreamInput.TtsControlOneofCase', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.StreamOutput', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.TtsParamsV1', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.UpdateRequest', null, global);
goog.exportSymbol('proto.nuance.dlg.v1.UpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StreamInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.dlg.v1.StreamInput.oneofGroups_);
};
goog.inherits(proto.nuance.dlg.v1.StreamInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StreamInput.displayName = 'proto.nuance.dlg.v1.StreamInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StreamOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StreamOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StreamOutput.displayName = 'proto.nuance.dlg.v1.StreamOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StartRequest.displayName = 'proto.nuance.dlg.v1.StartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StartResponse.displayName = 'proto.nuance.dlg.v1.StartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.UpdateRequest.displayName = 'proto.nuance.dlg.v1.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.UpdateResponse.displayName = 'proto.nuance.dlg.v1.UpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.ExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.ExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.ExecuteRequest.displayName = 'proto.nuance.dlg.v1.ExecuteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.AsrParamsV1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dlg.v1.AsrParamsV1.repeatedFields_, proto.nuance.dlg.v1.AsrParamsV1.oneofGroups_);
};
goog.inherits(proto.nuance.dlg.v1.AsrParamsV1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.AsrParamsV1.displayName = 'proto.nuance.dlg.v1.AsrParamsV1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.TtsParamsV1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.TtsParamsV1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.TtsParamsV1.displayName = 'proto.nuance.dlg.v1.TtsParamsV1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.ExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.ExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.ExecuteResponse.displayName = 'proto.nuance.dlg.v1.ExecuteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StopRequest.displayName = 'proto.nuance.dlg.v1.StopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StopResponse.displayName = 'proto.nuance.dlg.v1.StopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StatusRequest.displayName = 'proto.nuance.dlg.v1.StatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dlg.v1.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dlg.v1.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.dlg.v1.StatusResponse.displayName = 'proto.nuance.dlg.v1.StatusResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.dlg.v1.StreamInput.oneofGroups_ = [[2],[4]];

/**
 * @enum {number}
 */
proto.nuance.dlg.v1.StreamInput.AsrControlOneofCase = {
  ASR_CONTROL_ONEOF_NOT_SET: 0,
  ASR_CONTROL_V1: 2
};

/**
 * @return {proto.nuance.dlg.v1.StreamInput.AsrControlOneofCase}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getAsrControlOneofCase = function() {
  return /** @type {proto.nuance.dlg.v1.StreamInput.AsrControlOneofCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dlg.v1.StreamInput.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.nuance.dlg.v1.StreamInput.TtsControlOneofCase = {
  TTS_CONTROL_ONEOF_NOT_SET: 0,
  TTS_CONTROL_V1: 4
};

/**
 * @return {proto.nuance.dlg.v1.StreamInput.TtsControlOneofCase}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getTtsControlOneofCase = function() {
  return /** @type {proto.nuance.dlg.v1.StreamInput.TtsControlOneofCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dlg.v1.StreamInput.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StreamInput.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StreamInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StreamInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StreamInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.nuance.dlg.v1.ExecuteRequest.toObject(includeInstance, f),
    asrControlV1: (f = msg.getAsrControlV1()) && proto.nuance.dlg.v1.AsrParamsV1.toObject(includeInstance, f),
    audio: msg.getAudio_asB64(),
    ttsControlV1: (f = msg.getTtsControlV1()) && proto.nuance.dlg.v1.TtsParamsV1.toObject(includeInstance, f),
    controlMessage: (f = msg.getControlMessage()) && nuance_asr_v1_recognizer_pb.ControlMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StreamInput}
 */
proto.nuance.dlg.v1.StreamInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StreamInput;
  return proto.nuance.dlg.v1.StreamInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StreamInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StreamInput}
 */
proto.nuance.dlg.v1.StreamInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.dlg.v1.ExecuteRequest;
      reader.readMessage(value,proto.nuance.dlg.v1.ExecuteRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.nuance.dlg.v1.AsrParamsV1;
      reader.readMessage(value,proto.nuance.dlg.v1.AsrParamsV1.deserializeBinaryFromReader);
      msg.setAsrControlV1(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudio(value);
      break;
    case 4:
      var value = new proto.nuance.dlg.v1.TtsParamsV1;
      reader.readMessage(value,proto.nuance.dlg.v1.TtsParamsV1.deserializeBinaryFromReader);
      msg.setTtsControlV1(value);
      break;
    case 5:
      var value = new nuance_asr_v1_recognizer_pb.ControlMessage;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.ControlMessage.deserializeBinaryFromReader);
      msg.setControlMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StreamInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StreamInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StreamInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StreamInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.dlg.v1.ExecuteRequest.serializeBinaryToWriter
    );
  }
  f = message.getAsrControlV1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.dlg.v1.AsrParamsV1.serializeBinaryToWriter
    );
  }
  f = message.getAudio_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTtsControlV1();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nuance.dlg.v1.TtsParamsV1.serializeBinaryToWriter
    );
  }
  f = message.getControlMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      nuance_asr_v1_recognizer_pb.ControlMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExecuteRequest request = 1;
 * @return {?proto.nuance.dlg.v1.ExecuteRequest}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getRequest = function() {
  return /** @type{?proto.nuance.dlg.v1.ExecuteRequest} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dlg.v1.ExecuteRequest, 1));
};


/**
 * @param {?proto.nuance.dlg.v1.ExecuteRequest|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
*/
proto.nuance.dlg.v1.StreamInput.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
 */
proto.nuance.dlg.v1.StreamInput.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamInput.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AsrParamsV1 asr_control_v1 = 2;
 * @return {?proto.nuance.dlg.v1.AsrParamsV1}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getAsrControlV1 = function() {
  return /** @type{?proto.nuance.dlg.v1.AsrParamsV1} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dlg.v1.AsrParamsV1, 2));
};


/**
 * @param {?proto.nuance.dlg.v1.AsrParamsV1|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
*/
proto.nuance.dlg.v1.StreamInput.prototype.setAsrControlV1 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nuance.dlg.v1.StreamInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
 */
proto.nuance.dlg.v1.StreamInput.prototype.clearAsrControlV1 = function() {
  return this.setAsrControlV1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamInput.prototype.hasAsrControlV1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes audio = 3;
 * @return {!(string|Uint8Array)}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes audio = 3;
 * This is a type-conversion wrapper around `getAudio()`
 * @return {string}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudio()));
};


/**
 * optional bytes audio = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudio()`
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
 */
proto.nuance.dlg.v1.StreamInput.prototype.setAudio = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional TtsParamsV1 tts_control_v1 = 4;
 * @return {?proto.nuance.dlg.v1.TtsParamsV1}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getTtsControlV1 = function() {
  return /** @type{?proto.nuance.dlg.v1.TtsParamsV1} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dlg.v1.TtsParamsV1, 4));
};


/**
 * @param {?proto.nuance.dlg.v1.TtsParamsV1|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
*/
proto.nuance.dlg.v1.StreamInput.prototype.setTtsControlV1 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.nuance.dlg.v1.StreamInput.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
 */
proto.nuance.dlg.v1.StreamInput.prototype.clearTtsControlV1 = function() {
  return this.setTtsControlV1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamInput.prototype.hasTtsControlV1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional nuance.asr.v1.ControlMessage control_message = 5;
 * @return {?proto.nuance.asr.v1.ControlMessage}
 */
proto.nuance.dlg.v1.StreamInput.prototype.getControlMessage = function() {
  return /** @type{?proto.nuance.asr.v1.ControlMessage} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.ControlMessage, 5));
};


/**
 * @param {?proto.nuance.asr.v1.ControlMessage|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
*/
proto.nuance.dlg.v1.StreamInput.prototype.setControlMessage = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamInput} returns this
 */
proto.nuance.dlg.v1.StreamInput.prototype.clearControlMessage = function() {
  return this.setControlMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamInput.prototype.hasControlMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StreamOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StreamOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StreamOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.nuance.dlg.v1.ExecuteResponse.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && nuance_tts_v1_nuance_tts_v1_pb.SynthesisResponse.toObject(includeInstance, f),
    asrResult: (f = msg.getAsrResult()) && nuance_asr_v1_result_pb.Result.toObject(includeInstance, f),
    asrStatus: (f = msg.getAsrStatus()) && nuance_asr_v1_recognizer_pb.Status.toObject(includeInstance, f),
    asrStartOfSpeech: (f = msg.getAsrStartOfSpeech()) && nuance_asr_v1_recognizer_pb.StartOfSpeech.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StreamOutput}
 */
proto.nuance.dlg.v1.StreamOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StreamOutput;
  return proto.nuance.dlg.v1.StreamOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StreamOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StreamOutput}
 */
proto.nuance.dlg.v1.StreamOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.dlg.v1.ExecuteResponse;
      reader.readMessage(value,proto.nuance.dlg.v1.ExecuteResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new nuance_tts_v1_nuance_tts_v1_pb.SynthesisResponse;
      reader.readMessage(value,nuance_tts_v1_nuance_tts_v1_pb.SynthesisResponse.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 3:
      var value = new nuance_asr_v1_result_pb.Result;
      reader.readMessage(value,nuance_asr_v1_result_pb.Result.deserializeBinaryFromReader);
      msg.setAsrResult(value);
      break;
    case 4:
      var value = new nuance_asr_v1_recognizer_pb.Status;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.Status.deserializeBinaryFromReader);
      msg.setAsrStatus(value);
      break;
    case 5:
      var value = new nuance_asr_v1_recognizer_pb.StartOfSpeech;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.StartOfSpeech.deserializeBinaryFromReader);
      msg.setAsrStartOfSpeech(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StreamOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StreamOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StreamOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.dlg.v1.ExecuteResponse.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuance_tts_v1_nuance_tts_v1_pb.SynthesisResponse.serializeBinaryToWriter
    );
  }
  f = message.getAsrResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_asr_v1_result_pb.Result.serializeBinaryToWriter
    );
  }
  f = message.getAsrStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      nuance_asr_v1_recognizer_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getAsrStartOfSpeech();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      nuance_asr_v1_recognizer_pb.StartOfSpeech.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExecuteResponse response = 1;
 * @return {?proto.nuance.dlg.v1.ExecuteResponse}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.getResponse = function() {
  return /** @type{?proto.nuance.dlg.v1.ExecuteResponse} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dlg.v1.ExecuteResponse, 1));
};


/**
 * @param {?proto.nuance.dlg.v1.ExecuteResponse|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
*/
proto.nuance.dlg.v1.StreamOutput.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
 */
proto.nuance.dlg.v1.StreamOutput.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional nuance.tts.v1.SynthesisResponse audio = 2;
 * @return {?proto.nuance.tts.v1.SynthesisResponse}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.getAudio = function() {
  return /** @type{?proto.nuance.tts.v1.SynthesisResponse} */ (
    jspb.Message.getWrapperField(this, nuance_tts_v1_nuance_tts_v1_pb.SynthesisResponse, 2));
};


/**
 * @param {?proto.nuance.tts.v1.SynthesisResponse|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
*/
proto.nuance.dlg.v1.StreamOutput.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
 */
proto.nuance.dlg.v1.StreamOutput.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional nuance.asr.v1.Result asr_result = 3;
 * @return {?proto.nuance.asr.v1.Result}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.getAsrResult = function() {
  return /** @type{?proto.nuance.asr.v1.Result} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_result_pb.Result, 3));
};


/**
 * @param {?proto.nuance.asr.v1.Result|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
*/
proto.nuance.dlg.v1.StreamOutput.prototype.setAsrResult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
 */
proto.nuance.dlg.v1.StreamOutput.prototype.clearAsrResult = function() {
  return this.setAsrResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.hasAsrResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional nuance.asr.v1.Status asr_status = 4;
 * @return {?proto.nuance.asr.v1.Status}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.getAsrStatus = function() {
  return /** @type{?proto.nuance.asr.v1.Status} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.Status, 4));
};


/**
 * @param {?proto.nuance.asr.v1.Status|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
*/
proto.nuance.dlg.v1.StreamOutput.prototype.setAsrStatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
 */
proto.nuance.dlg.v1.StreamOutput.prototype.clearAsrStatus = function() {
  return this.setAsrStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.hasAsrStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional nuance.asr.v1.StartOfSpeech asr_start_of_speech = 5;
 * @return {?proto.nuance.asr.v1.StartOfSpeech}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.getAsrStartOfSpeech = function() {
  return /** @type{?proto.nuance.asr.v1.StartOfSpeech} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.StartOfSpeech, 5));
};


/**
 * @param {?proto.nuance.asr.v1.StartOfSpeech|undefined} value
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
*/
proto.nuance.dlg.v1.StreamOutput.prototype.setAsrStartOfSpeech = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StreamOutput} returns this
 */
proto.nuance.dlg.v1.StreamOutput.prototype.clearAsrStartOfSpeech = function() {
  return this.setAsrStartOfSpeech(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StreamOutput.prototype.hasAsrStartOfSpeech = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selector: (f = msg.getSelector()) && nuance_dlg_v1_common_dlg_common_messages_pb.Selector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && nuance_dlg_v1_common_dlg_common_messages_pb.StartRequestPayload.toObject(includeInstance, f),
    sessionTimeoutSec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clientDataMap: (f = msg.getClientDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StartRequest}
 */
proto.nuance.dlg.v1.StartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StartRequest;
  return proto.nuance.dlg.v1.StartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StartRequest}
 */
proto.nuance.dlg.v1.StartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.Selector;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 3:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.StartRequestPayload;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.StartRequestPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionTimeoutSec(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 6:
      var value = msg.getClientDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.Selector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.StartRequestPayload.serializeBinaryToWriter
    );
  }
  f = message.getSessionTimeoutSec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClientDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.Selector selector = 2;
 * @return {?proto.nuance.dlg.v1.common.Selector}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getSelector = function() {
  return /** @type{?proto.nuance.dlg.v1.common.Selector} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.Selector, 2));
};


/**
 * @param {?proto.nuance.dlg.v1.common.Selector|undefined} value
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
*/
proto.nuance.dlg.v1.StartRequest.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StartRequest.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional common.StartRequestPayload payload = 3;
 * @return {?proto.nuance.dlg.v1.common.StartRequestPayload}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dlg.v1.common.StartRequestPayload} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.StartRequestPayload, 3));
};


/**
 * @param {?proto.nuance.dlg.v1.common.StartRequestPayload|undefined} value
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
*/
proto.nuance.dlg.v1.StartRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StartRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 session_timeout_sec = 4;
 * @return {number}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getSessionTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.setSessionTimeoutSec = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, string> client_data = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.dlg.v1.StartRequest.prototype.getClientDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.dlg.v1.StartRequest} returns this
 */
proto.nuance.dlg.v1.StartRequest.prototype.clearClientDataMap = function() {
  this.getClientDataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && nuance_dlg_v1_common_dlg_common_messages_pb.StartResponsePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StartResponse}
 */
proto.nuance.dlg.v1.StartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StartResponse;
  return proto.nuance.dlg.v1.StartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StartResponse}
 */
proto.nuance.dlg.v1.StartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.StartResponsePayload;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.StartResponsePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.StartResponsePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.StartResponsePayload payload = 1;
 * @return {?proto.nuance.dlg.v1.common.StartResponsePayload}
 */
proto.nuance.dlg.v1.StartResponse.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dlg.v1.common.StartResponsePayload} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.StartResponsePayload, 1));
};


/**
 * @param {?proto.nuance.dlg.v1.common.StartResponsePayload|undefined} value
 * @return {!proto.nuance.dlg.v1.StartResponse} returns this
*/
proto.nuance.dlg.v1.StartResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.StartResponse} returns this
 */
proto.nuance.dlg.v1.StartResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.StartResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: (f = msg.getPayload()) && nuance_dlg_v1_common_dlg_common_messages_pb.UpdateRequestPayload.toObject(includeInstance, f),
    clientDataMap: (f = msg.getClientDataMap()) ? f.toObject(includeInstance, undefined) : [],
    userId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.UpdateRequest}
 */
proto.nuance.dlg.v1.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.UpdateRequest;
  return proto.nuance.dlg.v1.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.UpdateRequest}
 */
proto.nuance.dlg.v1.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.UpdateRequestPayload;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.UpdateRequestPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 3:
      var value = msg.getClientDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.UpdateRequestPayload.serializeBinaryToWriter
    );
  }
  f = message.getClientDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.UpdateRequest} returns this
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.UpdateRequestPayload payload = 2;
 * @return {?proto.nuance.dlg.v1.common.UpdateRequestPayload}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dlg.v1.common.UpdateRequestPayload} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.UpdateRequestPayload, 2));
};


/**
 * @param {?proto.nuance.dlg.v1.common.UpdateRequestPayload|undefined} value
 * @return {!proto.nuance.dlg.v1.UpdateRequest} returns this
*/
proto.nuance.dlg.v1.UpdateRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.UpdateRequest} returns this
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> client_data = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.getClientDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.dlg.v1.UpdateRequest} returns this
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.clearClientDataMap = function() {
  this.getClientDataMap().clear();
  return this;};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.UpdateRequest} returns this
 */
proto.nuance.dlg.v1.UpdateRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.UpdateResponse}
 */
proto.nuance.dlg.v1.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.UpdateResponse;
  return proto.nuance.dlg.v1.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.UpdateResponse}
 */
proto.nuance.dlg.v1.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.UpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.ExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.ExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.ExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selector: (f = msg.getSelector()) && nuance_dlg_v1_common_dlg_common_messages_pb.Selector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteRequestPayload.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.ExecuteRequest}
 */
proto.nuance.dlg.v1.ExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.ExecuteRequest;
  return proto.nuance.dlg.v1.ExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.ExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.ExecuteRequest}
 */
proto.nuance.dlg.v1.ExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.Selector;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 3:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteRequestPayload;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteRequestPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.ExecuteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.ExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.ExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.Selector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteRequestPayload.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.Selector selector = 2;
 * @return {?proto.nuance.dlg.v1.common.Selector}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.getSelector = function() {
  return /** @type{?proto.nuance.dlg.v1.common.Selector} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.Selector, 2));
};


/**
 * @param {?proto.nuance.dlg.v1.common.Selector|undefined} value
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
*/
proto.nuance.dlg.v1.ExecuteRequest.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional common.ExecuteRequestPayload payload = 3;
 * @return {?proto.nuance.dlg.v1.common.ExecuteRequestPayload}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dlg.v1.common.ExecuteRequestPayload} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteRequestPayload, 3));
};


/**
 * @param {?proto.nuance.dlg.v1.common.ExecuteRequestPayload|undefined} value
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
*/
proto.nuance.dlg.v1.ExecuteRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.ExecuteRequest} returns this
 */
proto.nuance.dlg.v1.ExecuteRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dlg.v1.AsrParamsV1.repeatedFields_ = [11];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.dlg.v1.AsrParamsV1.oneofGroups_ = [[8]];

/**
 * @enum {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.OptionalSpeechDetectionSensitivityCase = {
  OPTIONAL_SPEECH_DETECTION_SENSITIVITY_NOT_SET: 0,
  SPEECH_DETECTION_SENSITIVITY: 8
};

/**
 * @return {proto.nuance.dlg.v1.AsrParamsV1.OptionalSpeechDetectionSensitivityCase}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getOptionalSpeechDetectionSensitivityCase = function() {
  return /** @type {proto.nuance.dlg.v1.AsrParamsV1.OptionalSpeechDetectionSensitivityCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dlg.v1.AsrParamsV1.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.AsrParamsV1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.AsrParamsV1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.AsrParamsV1.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioFormat: (f = msg.getAudioFormat()) && nuance_asr_v1_recognizer_pb.AudioFormat.toObject(includeInstance, f),
    utteranceDetectionMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recognitionFlags: (f = msg.getRecognitionFlags()) && nuance_asr_v1_recognizer_pb.RecognitionFlags.toObject(includeInstance, f),
    resultType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    noInputTimeoutMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    recognitionTimeoutMs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    utteranceEndSilenceMs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    speechDetectionSensitivity: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    maxHypotheses: jspb.Message.getFieldWithDefault(msg, 9, 0),
    endStreamNoValidHypotheses: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    nuance_asr_v1_resource_pb.RecognitionResource.toObject, includeInstance),
    speechDomain: jspb.Message.getFieldWithDefault(msg, 12, ""),
    formatting: (f = msg.getFormatting()) && nuance_asr_v1_recognizer_pb.Formatting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1}
 */
proto.nuance.dlg.v1.AsrParamsV1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.AsrParamsV1;
  return proto.nuance.dlg.v1.AsrParamsV1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.AsrParamsV1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1}
 */
proto.nuance.dlg.v1.AsrParamsV1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuance_asr_v1_recognizer_pb.AudioFormat;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.AudioFormat.deserializeBinaryFromReader);
      msg.setAudioFormat(value);
      break;
    case 2:
      var value = /** @type {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} */ (reader.readEnum());
      msg.setUtteranceDetectionMode(value);
      break;
    case 3:
      var value = new nuance_asr_v1_recognizer_pb.RecognitionFlags;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.RecognitionFlags.deserializeBinaryFromReader);
      msg.setRecognitionFlags(value);
      break;
    case 4:
      var value = /** @type {!proto.nuance.asr.v1.EnumResultType} */ (reader.readEnum());
      msg.setResultType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoInputTimeoutMs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecognitionTimeoutMs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUtteranceEndSilenceMs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeechDetectionSensitivity(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxHypotheses(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndStreamNoValidHypotheses(value);
      break;
    case 11:
      var value = new nuance_asr_v1_resource_pb.RecognitionResource;
      reader.readMessage(value,nuance_asr_v1_resource_pb.RecognitionResource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeechDomain(value);
      break;
    case 13:
      var value = new nuance_asr_v1_recognizer_pb.Formatting;
      reader.readMessage(value,nuance_asr_v1_recognizer_pb.Formatting.deserializeBinaryFromReader);
      msg.setFormatting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.AsrParamsV1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.AsrParamsV1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.AsrParamsV1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuance_asr_v1_recognizer_pb.AudioFormat.serializeBinaryToWriter
    );
  }
  f = message.getUtteranceDetectionMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRecognitionFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_asr_v1_recognizer_pb.RecognitionFlags.serializeBinaryToWriter
    );
  }
  f = message.getResultType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getNoInputTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRecognitionTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getUtteranceEndSilenceMs();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMaxHypotheses();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getEndStreamNoValidHypotheses();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      nuance_asr_v1_resource_pb.RecognitionResource.serializeBinaryToWriter
    );
  }
  f = message.getSpeechDomain();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFormatting();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      nuance_asr_v1_recognizer_pb.Formatting.serializeBinaryToWriter
    );
  }
};


/**
 * optional nuance.asr.v1.AudioFormat audio_format = 1;
 * @return {?proto.nuance.asr.v1.AudioFormat}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getAudioFormat = function() {
  return /** @type{?proto.nuance.asr.v1.AudioFormat} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.AudioFormat, 1));
};


/**
 * @param {?proto.nuance.asr.v1.AudioFormat|undefined} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
*/
proto.nuance.dlg.v1.AsrParamsV1.prototype.setAudioFormat = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.clearAudioFormat = function() {
  return this.setAudioFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.hasAudioFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional nuance.asr.v1.EnumUtteranceDetectionMode utterance_detection_mode = 2;
 * @return {!proto.nuance.asr.v1.EnumUtteranceDetectionMode}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getUtteranceDetectionMode = function() {
  return /** @type {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setUtteranceDetectionMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional nuance.asr.v1.RecognitionFlags recognition_flags = 3;
 * @return {?proto.nuance.asr.v1.RecognitionFlags}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getRecognitionFlags = function() {
  return /** @type{?proto.nuance.asr.v1.RecognitionFlags} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.RecognitionFlags, 3));
};


/**
 * @param {?proto.nuance.asr.v1.RecognitionFlags|undefined} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
*/
proto.nuance.dlg.v1.AsrParamsV1.prototype.setRecognitionFlags = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.clearRecognitionFlags = function() {
  return this.setRecognitionFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.hasRecognitionFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional nuance.asr.v1.EnumResultType result_type = 4;
 * @return {!proto.nuance.asr.v1.EnumResultType}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getResultType = function() {
  return /** @type {!proto.nuance.asr.v1.EnumResultType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumResultType} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setResultType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 no_input_timeout_ms = 5;
 * @return {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getNoInputTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setNoInputTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 recognition_timeout_ms = 6;
 * @return {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getRecognitionTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setRecognitionTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 utterance_end_silence_ms = 7;
 * @return {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getUtteranceEndSilenceMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setUtteranceEndSilenceMs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float speech_detection_sensitivity = 8;
 * @return {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getSpeechDetectionSensitivity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setSpeechDetectionSensitivity = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.nuance.dlg.v1.AsrParamsV1.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.clearSpeechDetectionSensitivity = function() {
  return jspb.Message.setOneofField(this, 8, proto.nuance.dlg.v1.AsrParamsV1.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.hasSpeechDetectionSensitivity = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 max_hypotheses = 9;
 * @return {number}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getMaxHypotheses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setMaxHypotheses = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool end_stream_no_valid_hypotheses = 10;
 * @return {boolean}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getEndStreamNoValidHypotheses = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setEndStreamNoValidHypotheses = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * repeated nuance.asr.v1.RecognitionResource resources = 11;
 * @return {!Array<!proto.nuance.asr.v1.RecognitionResource>}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nuance.asr.v1.RecognitionResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, nuance_asr_v1_resource_pb.RecognitionResource, 11));
};


/**
 * @param {!Array<!proto.nuance.asr.v1.RecognitionResource>} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
*/
proto.nuance.dlg.v1.AsrParamsV1.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.nuance.asr.v1.RecognitionResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.asr.v1.RecognitionResource}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.nuance.asr.v1.RecognitionResource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


/**
 * optional string speech_domain = 12;
 * @return {string}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getSpeechDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.setSpeechDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional nuance.asr.v1.Formatting formatting = 13;
 * @return {?proto.nuance.asr.v1.Formatting}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.getFormatting = function() {
  return /** @type{?proto.nuance.asr.v1.Formatting} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_recognizer_pb.Formatting, 13));
};


/**
 * @param {?proto.nuance.asr.v1.Formatting|undefined} value
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
*/
proto.nuance.dlg.v1.AsrParamsV1.prototype.setFormatting = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.AsrParamsV1} returns this
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.clearFormatting = function() {
  return this.setFormatting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.AsrParamsV1.prototype.hasFormatting = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.TtsParamsV1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.TtsParamsV1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.TtsParamsV1.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioParams: (f = msg.getAudioParams()) && nuance_tts_v1_nuance_tts_v1_pb.AudioParameters.toObject(includeInstance, f),
    voice: (f = msg.getVoice()) && nuance_tts_v1_nuance_tts_v1_pb.Voice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.TtsParamsV1}
 */
proto.nuance.dlg.v1.TtsParamsV1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.TtsParamsV1;
  return proto.nuance.dlg.v1.TtsParamsV1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.TtsParamsV1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.TtsParamsV1}
 */
proto.nuance.dlg.v1.TtsParamsV1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuance_tts_v1_nuance_tts_v1_pb.AudioParameters;
      reader.readMessage(value,nuance_tts_v1_nuance_tts_v1_pb.AudioParameters.deserializeBinaryFromReader);
      msg.setAudioParams(value);
      break;
    case 2:
      var value = new nuance_tts_v1_nuance_tts_v1_pb.Voice;
      reader.readMessage(value,nuance_tts_v1_nuance_tts_v1_pb.Voice.deserializeBinaryFromReader);
      msg.setVoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.TtsParamsV1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.TtsParamsV1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.TtsParamsV1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuance_tts_v1_nuance_tts_v1_pb.AudioParameters.serializeBinaryToWriter
    );
  }
  f = message.getVoice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuance_tts_v1_nuance_tts_v1_pb.Voice.serializeBinaryToWriter
    );
  }
};


/**
 * optional nuance.tts.v1.AudioParameters audio_params = 1;
 * @return {?proto.nuance.tts.v1.AudioParameters}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.getAudioParams = function() {
  return /** @type{?proto.nuance.tts.v1.AudioParameters} */ (
    jspb.Message.getWrapperField(this, nuance_tts_v1_nuance_tts_v1_pb.AudioParameters, 1));
};


/**
 * @param {?proto.nuance.tts.v1.AudioParameters|undefined} value
 * @return {!proto.nuance.dlg.v1.TtsParamsV1} returns this
*/
proto.nuance.dlg.v1.TtsParamsV1.prototype.setAudioParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.TtsParamsV1} returns this
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.clearAudioParams = function() {
  return this.setAudioParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.hasAudioParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional nuance.tts.v1.Voice voice = 2;
 * @return {?proto.nuance.tts.v1.Voice}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.getVoice = function() {
  return /** @type{?proto.nuance.tts.v1.Voice} */ (
    jspb.Message.getWrapperField(this, nuance_tts_v1_nuance_tts_v1_pb.Voice, 2));
};


/**
 * @param {?proto.nuance.tts.v1.Voice|undefined} value
 * @return {!proto.nuance.dlg.v1.TtsParamsV1} returns this
*/
proto.nuance.dlg.v1.TtsParamsV1.prototype.setVoice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.TtsParamsV1} returns this
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.clearVoice = function() {
  return this.setVoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.TtsParamsV1.prototype.hasVoice = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.ExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.ExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.ExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.ExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteResponsePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.ExecuteResponse}
 */
proto.nuance.dlg.v1.ExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.ExecuteResponse;
  return proto.nuance.dlg.v1.ExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.ExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.ExecuteResponse}
 */
proto.nuance.dlg.v1.ExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteResponsePayload;
      reader.readMessage(value,nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteResponsePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.ExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.ExecuteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.ExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.ExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteResponsePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.ExecuteResponsePayload payload = 1;
 * @return {?proto.nuance.dlg.v1.common.ExecuteResponsePayload}
 */
proto.nuance.dlg.v1.ExecuteResponse.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dlg.v1.common.ExecuteResponsePayload} */ (
    jspb.Message.getWrapperField(this, nuance_dlg_v1_common_dlg_common_messages_pb.ExecuteResponsePayload, 1));
};


/**
 * @param {?proto.nuance.dlg.v1.common.ExecuteResponsePayload|undefined} value
 * @return {!proto.nuance.dlg.v1.ExecuteResponse} returns this
*/
proto.nuance.dlg.v1.ExecuteResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.dlg.v1.ExecuteResponse} returns this
 */
proto.nuance.dlg.v1.ExecuteResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dlg.v1.ExecuteResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StopRequest}
 */
proto.nuance.dlg.v1.StopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StopRequest;
  return proto.nuance.dlg.v1.StopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StopRequest}
 */
proto.nuance.dlg.v1.StopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dlg.v1.StopRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.StopRequest} returns this
 */
proto.nuance.dlg.v1.StopRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.nuance.dlg.v1.StopRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.StopRequest} returns this
 */
proto.nuance.dlg.v1.StopRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StopResponse}
 */
proto.nuance.dlg.v1.StopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StopResponse;
  return proto.nuance.dlg.v1.StopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StopResponse}
 */
proto.nuance.dlg.v1.StopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StatusRequest}
 */
proto.nuance.dlg.v1.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StatusRequest;
  return proto.nuance.dlg.v1.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StatusRequest}
 */
proto.nuance.dlg.v1.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dlg.v1.StatusRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.dlg.v1.StatusRequest} returns this
 */
proto.nuance.dlg.v1.StatusRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dlg.v1.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dlg.v1.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dlg.v1.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionRemainingSec: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dlg.v1.StatusResponse}
 */
proto.nuance.dlg.v1.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dlg.v1.StatusResponse;
  return proto.nuance.dlg.v1.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dlg.v1.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dlg.v1.StatusResponse}
 */
proto.nuance.dlg.v1.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionRemainingSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dlg.v1.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dlg.v1.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dlg.v1.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dlg.v1.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionRemainingSec();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 session_remaining_sec = 1;
 * @return {number}
 */
proto.nuance.dlg.v1.StatusResponse.prototype.getSessionRemainingSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.dlg.v1.StatusResponse} returns this
 */
proto.nuance.dlg.v1.StatusResponse.prototype.setSessionRemainingSec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.nuance.dlg.v1);
