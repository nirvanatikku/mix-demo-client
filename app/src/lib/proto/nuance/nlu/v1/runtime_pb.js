// source: nuance/nlu/v1/runtime.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var nuance_nlu_v1_result_pb = require('../../../nuance/nlu/v1/result_pb.js');
goog.object.extend(proto, nuance_nlu_v1_result_pb);
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.EnumInterpretationResultType', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.EnumResourceType', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretRequest', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretResponse', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretationInput', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretationInput.InputUnionCase', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretationParameters', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretationResource', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.InterpretationResource.ResourceUnionCase', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.ResourceReference', null, global);
goog.exportSymbol('proto.nuance.nlu.v1.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.InterpretRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.nlu.v1.InterpretRequest.repeatedFields_, null);
};
goog.inherits(proto.nuance.nlu.v1.InterpretRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.InterpretRequest.displayName = 'proto.nuance.nlu.v1.InterpretRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.InterpretationParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.nlu.v1.InterpretationParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.InterpretationParameters.displayName = 'proto.nuance.nlu.v1.InterpretationParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.InterpretationResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.nlu.v1.InterpretationResource.oneofGroups_);
};
goog.inherits(proto.nuance.nlu.v1.InterpretationResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.InterpretationResource.displayName = 'proto.nuance.nlu.v1.InterpretationResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.ResourceReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.nlu.v1.ResourceReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.ResourceReference.displayName = 'proto.nuance.nlu.v1.ResourceReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.InterpretationInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.nlu.v1.InterpretationInput.oneofGroups_);
};
goog.inherits(proto.nuance.nlu.v1.InterpretationInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.InterpretationInput.displayName = 'proto.nuance.nlu.v1.InterpretationInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.InterpretResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.nlu.v1.InterpretResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.InterpretResponse.displayName = 'proto.nuance.nlu.v1.InterpretResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.nlu.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.nlu.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.nlu.v1.Status.displayName = 'proto.nuance.nlu.v1.Status';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.nlu.v1.InterpretRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.InterpretRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.InterpretRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.nuance.nlu.v1.InterpretationParameters.toObject(includeInstance, f),
    model: (f = msg.getModel()) && proto.nuance.nlu.v1.ResourceReference.toObject(includeInstance, f),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.nuance.nlu.v1.InterpretationResource.toObject, includeInstance),
    clientDataMap: (f = msg.getClientDataMap()) ? f.toObject(includeInstance, undefined) : [],
    userId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    input: (f = msg.getInput()) && proto.nuance.nlu.v1.InterpretationInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.InterpretRequest}
 */
proto.nuance.nlu.v1.InterpretRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.InterpretRequest;
  return proto.nuance.nlu.v1.InterpretRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.InterpretRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.InterpretRequest}
 */
proto.nuance.nlu.v1.InterpretRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.nlu.v1.InterpretationParameters;
      reader.readMessage(value,proto.nuance.nlu.v1.InterpretationParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = new proto.nuance.nlu.v1.ResourceReference;
      reader.readMessage(value,proto.nuance.nlu.v1.ResourceReference.deserializeBinaryFromReader);
      msg.setModel(value);
      break;
    case 3:
      var value = new proto.nuance.nlu.v1.InterpretationResource;
      reader.readMessage(value,proto.nuance.nlu.v1.InterpretationResource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 4:
      var value = msg.getClientDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 10:
      var value = new proto.nuance.nlu.v1.InterpretationInput;
      reader.readMessage(value,proto.nuance.nlu.v1.InterpretationInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.InterpretRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.InterpretRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.nlu.v1.InterpretationParameters.serializeBinaryToWriter
    );
  }
  f = message.getModel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.nlu.v1.ResourceReference.serializeBinaryToWriter
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nuance.nlu.v1.InterpretationResource.serializeBinaryToWriter
    );
  }
  f = message.getClientDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nuance.nlu.v1.InterpretationInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional InterpretationParameters parameters = 1;
 * @return {?proto.nuance.nlu.v1.InterpretationParameters}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getParameters = function() {
  return /** @type{?proto.nuance.nlu.v1.InterpretationParameters} */ (
    jspb.Message.getWrapperField(this, proto.nuance.nlu.v1.InterpretationParameters, 1));
};


/**
 * @param {?proto.nuance.nlu.v1.InterpretationParameters|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
*/
proto.nuance.nlu.v1.InterpretRequest.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResourceReference model = 2;
 * @return {?proto.nuance.nlu.v1.ResourceReference}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getModel = function() {
  return /** @type{?proto.nuance.nlu.v1.ResourceReference} */ (
    jspb.Message.getWrapperField(this, proto.nuance.nlu.v1.ResourceReference, 2));
};


/**
 * @param {?proto.nuance.nlu.v1.ResourceReference|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
*/
proto.nuance.nlu.v1.InterpretRequest.prototype.setModel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.clearModel = function() {
  return this.setModel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.hasModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated InterpretationResource resources = 3;
 * @return {!Array<!proto.nuance.nlu.v1.InterpretationResource>}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nuance.nlu.v1.InterpretationResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.nlu.v1.InterpretationResource, 3));
};


/**
 * @param {!Array<!proto.nuance.nlu.v1.InterpretationResource>} value
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
*/
proto.nuance.nlu.v1.InterpretRequest.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nuance.nlu.v1.InterpretationResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.nlu.v1.InterpretationResource}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nuance.nlu.v1.InterpretationResource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


/**
 * map<string, string> client_data = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getClientDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.clearClientDataMap = function() {
  this.getClientDataMap().clear();
  return this;};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional InterpretationInput input = 10;
 * @return {?proto.nuance.nlu.v1.InterpretationInput}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.getInput = function() {
  return /** @type{?proto.nuance.nlu.v1.InterpretationInput} */ (
    jspb.Message.getWrapperField(this, proto.nuance.nlu.v1.InterpretationInput, 10));
};


/**
 * @param {?proto.nuance.nlu.v1.InterpretationInput|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
*/
proto.nuance.nlu.v1.InterpretRequest.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretRequest} returns this
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretRequest.prototype.hasInput = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.InterpretationParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.InterpretationParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    interpretationResultType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    interpretationInputLoggingMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    postProcessingScriptParametersMap: (f = msg.getPostProcessingScriptParametersMap()) ? f.toObject(includeInstance, undefined) : [],
    maxInterpretations: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.InterpretationParameters}
 */
proto.nuance.nlu.v1.InterpretationParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.InterpretationParameters;
  return proto.nuance.nlu.v1.InterpretationParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.InterpretationParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.InterpretationParameters}
 */
proto.nuance.nlu.v1.InterpretationParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuance.nlu.v1.EnumInterpretationResultType} */ (reader.readEnum());
      msg.setInterpretationResultType(value);
      break;
    case 2:
      var value = /** @type {!proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode} */ (reader.readEnum());
      msg.setInterpretationInputLoggingMode(value);
      break;
    case 3:
      var value = msg.getPostProcessingScriptParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxInterpretations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.InterpretationParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.InterpretationParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterpretationResultType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInterpretationInputLoggingMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPostProcessingScriptParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMaxInterpretations();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional EnumInterpretationResultType interpretation_result_type = 1;
 * @return {!proto.nuance.nlu.v1.EnumInterpretationResultType}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.getInterpretationResultType = function() {
  return /** @type {!proto.nuance.nlu.v1.EnumInterpretationResultType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuance.nlu.v1.EnumInterpretationResultType} value
 * @return {!proto.nuance.nlu.v1.InterpretationParameters} returns this
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.setInterpretationResultType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;
 * @return {!proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.getInterpretationInputLoggingMode = function() {
  return /** @type {!proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode} value
 * @return {!proto.nuance.nlu.v1.InterpretationParameters} returns this
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.setInterpretationInputLoggingMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * map<string, string> post_processing_script_parameters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.getPostProcessingScriptParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.nlu.v1.InterpretationParameters} returns this
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.clearPostProcessingScriptParametersMap = function() {
  this.getPostProcessingScriptParametersMap().clear();
  return this;};


/**
 * optional uint32 max_interpretations = 12;
 * @return {number}
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.getMaxInterpretations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.nlu.v1.InterpretationParameters} returns this
 */
proto.nuance.nlu.v1.InterpretationParameters.prototype.setMaxInterpretations = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.nlu.v1.InterpretationResource.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nuance.nlu.v1.InterpretationResource.ResourceUnionCase = {
  RESOURCE_UNION_NOT_SET: 0,
  EXTERNAL_REFERENCE: 1,
  INLINE_WORDSET: 2
};

/**
 * @return {proto.nuance.nlu.v1.InterpretationResource.ResourceUnionCase}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.getResourceUnionCase = function() {
  return /** @type {proto.nuance.nlu.v1.InterpretationResource.ResourceUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.nlu.v1.InterpretationResource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.InterpretationResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.InterpretationResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalReference: (f = msg.getExternalReference()) && proto.nuance.nlu.v1.ResourceReference.toObject(includeInstance, f),
    inlineWordset: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.InterpretationResource}
 */
proto.nuance.nlu.v1.InterpretationResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.InterpretationResource;
  return proto.nuance.nlu.v1.InterpretationResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.InterpretationResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.InterpretationResource}
 */
proto.nuance.nlu.v1.InterpretationResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.nlu.v1.ResourceReference;
      reader.readMessage(value,proto.nuance.nlu.v1.ResourceReference.deserializeBinaryFromReader);
      msg.setExternalReference(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInlineWordset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.InterpretationResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.InterpretationResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.nlu.v1.ResourceReference.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResourceReference external_reference = 1;
 * @return {?proto.nuance.nlu.v1.ResourceReference}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.getExternalReference = function() {
  return /** @type{?proto.nuance.nlu.v1.ResourceReference} */ (
    jspb.Message.getWrapperField(this, proto.nuance.nlu.v1.ResourceReference, 1));
};


/**
 * @param {?proto.nuance.nlu.v1.ResourceReference|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretationResource} returns this
*/
proto.nuance.nlu.v1.InterpretationResource.prototype.setExternalReference = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nuance.nlu.v1.InterpretationResource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretationResource} returns this
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.clearExternalReference = function() {
  return this.setExternalReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.hasExternalReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string inline_wordset = 2;
 * @return {string}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.getInlineWordset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.InterpretationResource} returns this
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.setInlineWordset = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nuance.nlu.v1.InterpretationResource.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretationResource} returns this
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.clearInlineWordset = function() {
  return jspb.Message.setOneofField(this, 2, proto.nuance.nlu.v1.InterpretationResource.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretationResource.prototype.hasInlineWordset = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.ResourceReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.ResourceReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.ResourceReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestTimeoutMs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.ResourceReference}
 */
proto.nuance.nlu.v1.ResourceReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.ResourceReference;
  return proto.nuance.nlu.v1.ResourceReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.ResourceReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.ResourceReference}
 */
proto.nuance.nlu.v1.ResourceReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuance.nlu.v1.EnumResourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestTimeoutMs(value);
      break;
    case 8:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.ResourceReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.ResourceReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.ResourceReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional EnumResourceType type = 1;
 * @return {!proto.nuance.nlu.v1.EnumResourceType}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.getType = function() {
  return /** @type {!proto.nuance.nlu.v1.EnumResourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuance.nlu.v1.EnumResourceType} value
 * @return {!proto.nuance.nlu.v1.ResourceReference} returns this
 */
proto.nuance.nlu.v1.ResourceReference.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.ResourceReference} returns this
 */
proto.nuance.nlu.v1.ResourceReference.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 request_timeout_ms = 7;
 * @return {number}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.getRequestTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.nlu.v1.ResourceReference} returns this
 */
proto.nuance.nlu.v1.ResourceReference.prototype.setRequestTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * map<string, string> headers = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.nlu.v1.ResourceReference.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.nlu.v1.ResourceReference} returns this
 */
proto.nuance.nlu.v1.ResourceReference.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.nlu.v1.InterpretationInput.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nuance.nlu.v1.InterpretationInput.InputUnionCase = {
  INPUT_UNION_NOT_SET: 0,
  TEXT: 1,
  ASR_RESULT: 2
};

/**
 * @return {proto.nuance.nlu.v1.InterpretationInput.InputUnionCase}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.getInputUnionCase = function() {
  return /** @type {proto.nuance.nlu.v1.InterpretationInput.InputUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.nlu.v1.InterpretationInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.InterpretationInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.InterpretationInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asrResult: (f = msg.getAsrResult()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.InterpretationInput}
 */
proto.nuance.nlu.v1.InterpretationInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.InterpretationInput;
  return proto.nuance.nlu.v1.InterpretationInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.InterpretationInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.InterpretationInput}
 */
proto.nuance.nlu.v1.InterpretationInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setAsrResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.InterpretationInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.InterpretationInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretationInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsrResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.InterpretationInput} returns this
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nuance.nlu.v1.InterpretationInput.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretationInput} returns this
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 1, proto.nuance.nlu.v1.InterpretationInput.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Any asr_result = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.getAsrResult = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretationInput} returns this
*/
proto.nuance.nlu.v1.InterpretationInput.prototype.setAsrResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nuance.nlu.v1.InterpretationInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretationInput} returns this
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.clearAsrResult = function() {
  return this.setAsrResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretationInput.prototype.hasAsrResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.InterpretResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.InterpretResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.nuance.nlu.v1.Status.toObject(includeInstance, f),
    result: (f = msg.getResult()) && nuance_nlu_v1_result_pb.InterpretResult.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.InterpretResponse}
 */
proto.nuance.nlu.v1.InterpretResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.InterpretResponse;
  return proto.nuance.nlu.v1.InterpretResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.InterpretResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.InterpretResponse}
 */
proto.nuance.nlu.v1.InterpretResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.nlu.v1.Status;
      reader.readMessage(value,proto.nuance.nlu.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new nuance_nlu_v1_result_pb.InterpretResult;
      reader.readMessage(value,nuance_nlu_v1_result_pb.InterpretResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 13:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.InterpretResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.InterpretResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.InterpretResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.nlu.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_nlu_v1_result_pb.InterpretResult.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.nuance.nlu.v1.Status}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.getStatus = function() {
  return /** @type{?proto.nuance.nlu.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.nuance.nlu.v1.Status, 1));
};


/**
 * @param {?proto.nuance.nlu.v1.Status|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretResponse} returns this
*/
proto.nuance.nlu.v1.InterpretResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretResponse} returns this
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InterpretResult result = 3;
 * @return {?proto.nuance.nlu.v1.InterpretResult}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.getResult = function() {
  return /** @type{?proto.nuance.nlu.v1.InterpretResult} */ (
    jspb.Message.getWrapperField(this, nuance_nlu_v1_result_pb.InterpretResult, 3));
};


/**
 * @param {?proto.nuance.nlu.v1.InterpretResult|undefined} value
 * @return {!proto.nuance.nlu.v1.InterpretResponse} returns this
*/
proto.nuance.nlu.v1.InterpretResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.nlu.v1.InterpretResponse} returns this
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, google.protobuf.Any> metadata = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.nlu.v1.InterpretResponse} returns this
 */
proto.nuance.nlu.v1.InterpretResponse.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.nlu.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.nlu.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.nlu.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.nlu.v1.Status}
 */
proto.nuance.nlu.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.nlu.v1.Status;
  return proto.nuance.nlu.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.nlu.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.nlu.v1.Status}
 */
proto.nuance.nlu.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.nlu.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.nlu.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.nlu.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.nlu.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.nuance.nlu.v1.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.nlu.v1.Status} returns this
 */
proto.nuance.nlu.v1.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.nuance.nlu.v1.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.Status} returns this
 */
proto.nuance.nlu.v1.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.nuance.nlu.v1.Status.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.nlu.v1.Status} returns this
 */
proto.nuance.nlu.v1.Status.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.nuance.nlu.v1.EnumInterpretationResultType = {
  UNDEFINED: 0,
  SINGLE_INTENT: 1,
  MULTI_INTENT: 2
};

/**
 * @enum {number}
 */
proto.nuance.nlu.v1.EnumInterpretationInputLoggingMode = {
  PLAINTEXT: 0,
  SUPPRESSED: 9
};

/**
 * @enum {number}
 */
proto.nuance.nlu.v1.EnumResourceType = {
  UNDEFINED_RESOURCE_TYPE: 0,
  SEMANTIC_MODEL: 1,
  WORDSET: 2,
  COMPILED_WORDSET: 3
};

goog.object.extend(exports, proto.nuance.nlu.v1);
